<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ubuntu 删除文件</title>
      <link href="/2025/ubuntu-%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6/"/>
      <url>/2025/ubuntu-%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>在 Ubuntu 或其他 Linux 系统中，删除文件和文件夹通常使用以下命令：</p><hr><h3 id="📁-1-删除文件"><a href="#📁-1-删除文件" class="headerlink" title="📁 1. 删除文件"></a>📁 1. <strong>删除文件</strong></h3><p>使用 <code>rm</code> 命令删除单个文件或多个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> 文件名</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> example.txt               <span class="comment"># 删除单个文件</span></span><br><span class="line"><span class="built_in">rm</span> file1.txt file2.txt       <span class="comment"># 删除多个文件</span></span><br><span class="line"><span class="built_in">rm</span> *.<span class="built_in">log</span>                     <span class="comment"># 删除当前目录下所有 .log 文件（慎用！）</span></span><br></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>警告</strong>：<code>rm</code> 命令默认不会提示确认，删除后文件不会进入回收站，而是直接永久删除。</p></blockquote><hr><h3 id="📁-2-删除空文件夹"><a href="#📁-2-删除空文件夹" class="headerlink" title="📁 2. 删除空文件夹"></a>📁 2. <strong>删除空文件夹</strong></h3><p>使用 <code>rmdir</code> 命令删除 <strong>空文件夹</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> 文件夹名</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> empty_folder</span><br></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>注意</strong>：如果文件夹内有文件或其他子文件夹，<code>rmdir</code> 会报错并拒绝删除。</p></blockquote><hr><h3 id="📁-3-递归删除文件夹（含内容）"><a href="#📁-3-递归删除文件夹（含内容）" class="headerlink" title="📁 3. 递归删除文件夹（含内容）"></a>📁 3. <strong>递归删除文件夹（含内容）</strong></h3><p>要删除非空文件夹及其所有内容（包括子文件夹和文件），使用 <code>rm -r</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r 文件夹名</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r my_folder</span><br></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>警告</strong>：<code>-r</code> 表示递归删除，删除后不可恢复，务必谨慎操作。</p></blockquote><hr><h3 id="🔐-4-强制删除（忽略提示）"><a href="#🔐-4-强制删除（忽略提示）" class="headerlink" title="🔐 4. 强制删除（忽略提示）"></a>🔐 4. <strong>强制删除（忽略提示）</strong></h3><p>如果删除只读文件或系统文件，使用 <code>rm -f</code> 强制删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f 文件名</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f important.txt          <span class="comment"># 强制删除只读文件</span></span><br><span class="line"><span class="built_in">rm</span> -rf my_folder             <span class="comment"># 强制递归删除文件夹（极其危险！）</span></span><br></pre></td></tr></table></figure><blockquote><p>⚠️ <strong>极度警告</strong>：<code>rm -rf /</code> 是毁灭性命令，<strong>绝对不要执行</strong>！</p></blockquote><hr><h3 id="📋-5-删除前提示确认"><a href="#📋-5-删除前提示确认" class="headerlink" title="📋 5. 删除前提示确认"></a>📋 5. <strong>删除前提示确认</strong></h3><p>如果希望删除文件或文件夹时进行确认，使用 <code>-i</code> 选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -i 文件名</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -i test.txt</span><br><span class="line"><span class="comment"># 会提示：rm: remove regular file &#x27;test.txt&#x27;? 输入 y 回车确认删除</span></span><br></pre></td></tr></table></figure><hr><h3 id="🗂️-6-删除符合特定条件的文件"><a href="#🗂️-6-删除符合特定条件的文件" class="headerlink" title="🗂️ 6. 删除符合特定条件的文件"></a>🗂️ 6. <strong>删除符合特定条件的文件</strong></h3><p>使用 <code>find</code> 命令配合 <code>rm</code> 删除符合特定规则的文件。</p><h4 id="示例-1：删除指定路径下所有-tmp-文件"><a href="#示例-1：删除指定路径下所有-tmp-文件" class="headerlink" title="示例 1：删除指定路径下所有 .tmp 文件"></a>示例 1：删除指定路径下所有 <code>.tmp</code> 文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /path/to/dir -<span class="built_in">type</span> f -name <span class="string">&quot;*.tmp&quot;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> &#123;&#125; \;</span><br></pre></td></tr></table></figure><h4 id="示例-2：删除-7-天前的文件"><a href="#示例-2：删除-7-天前的文件" class="headerlink" title="示例 2：删除 7 天前的文件"></a>示例 2：删除 7 天前的文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /path/to/dir -<span class="built_in">type</span> f -mtime +7 -<span class="built_in">exec</span> <span class="built_in">rm</span> &#123;&#125; \;</span><br></pre></td></tr></table></figure><hr><h3 id="🧹-7-删除文件后释放空间"><a href="#🧹-7-删除文件后释放空间" class="headerlink" title="🧹 7. 删除文件后释放空间"></a>🧹 7. <strong>删除文件后释放空间</strong></h3><p>删除文件后，可以使用 <code>df -h</code> 查看磁盘空间是否释放：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure><p>如果文件正在被某个进程占用（如日志文件），即使删除了也可能不会释放空间。此时可使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof | grep deleted</span><br></pre></td></tr></table></figure><p>查看哪些进程占用了已删除的文件，然后重启相关服务或进程。</p><hr><h3 id="🧺-8-安全删除（防止恢复）"><a href="#🧺-8-安全删除（防止恢复）" class="headerlink" title="🧺 8. 安全删除（防止恢复）"></a>🧺 8. <strong>安全删除（防止恢复）</strong></h3><p>如果你希望彻底删除文件且无法恢复，可以使用 <code>shred</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shred</span> -u 文件名</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shred</span> -u sensitive_data.txt</span><br></pre></td></tr></table></figure><blockquote><p>⚠️ 注意：<code>shred</code> 不适用于 SSD 或某些文件系统（如 Btrfs、RAID、加密文件系统等）。</p></blockquote><hr><h2 id="✅-总结：常用删除命令对比"><a href="#✅-总结：常用删除命令对比" class="headerlink" title="✅ 总结：常用删除命令对比"></a>✅ 总结：常用删除命令对比</h2><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>删除单个文件</td><td><code>rm file.txt</code></td><td>快速删除</td></tr><tr><td>删除多个文件</td><td><code>rm file1.txt file2.txt</code></td><td>支持通配符 <code>*</code></td></tr><tr><td>删除空文件夹</td><td><code>rmdir folder</code></td><td>仅限空文件夹</td></tr><tr><td>删除非空文件夹</td><td><code>rm -r folder</code></td><td>递归删除所有内容</td></tr><tr><td>强制删除</td><td><code>rm -f file.txt</code></td><td>忽略提示和只读属性</td></tr><tr><td>强制递归删除</td><td><code>rm -rf folder</code></td><td>危险操作，慎用！</td></tr><tr><td>删除前确认</td><td><code>rm -i file.txt</code></td><td>安全操作，适合新手</td></tr><tr><td>查找并删除</td><td><code>find . -name &quot;*.tmp&quot; -exec rm &#123;&#125; \;</code></td><td>精准删除</td></tr></tbody></table><hr><h2 id="💡-小贴士"><a href="#💡-小贴士" class="headerlink" title="💡 小贴士"></a>💡 小贴士</h2><ul><li><p>删除前务必确认路径正确，特别是使用 <code>rm -rf</code>。</p></li><li><p>可以使用 <code>ls</code> 或 <code>find</code> 先查看目标文件或文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l folder</span><br><span class="line">find /path/to/dir -name <span class="string">&quot;pattern&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>如果误删文件，可尝试使用文件恢复工具（如 <code>extundelete</code>）恢复，但成功率取决于文件系统和覆盖情况。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> computer </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/hello-world/"/>
      <url>/2025/hello-world/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Hexo-博客全攻略：从零开始搭建你的个人技术博客"><a href="#Hexo-博客全攻略：从零开始搭建你的个人技术博客" class="headerlink" title="Hexo 博客全攻略：从零开始搭建你的个人技术博客"></a>Hexo 博客全攻略：从零开始搭建你的个人技术博客</h1><h2 id="新手友好指南-进阶技巧-常见问题解决"><a href="#新手友好指南-进阶技巧-常见问题解决" class="headerlink" title="新手友好指南 + 进阶技巧 + 常见问题解决"></a>新手友好指南 + 进阶技巧 + 常见问题解决</h2><hr><h3 id="📌-欢迎来到-Hexo-的世界！"><a href="#📌-欢迎来到-Hexo-的世界！" class="headerlink" title="📌 欢迎来到 Hexo 的世界！"></a>📌 欢迎来到 Hexo 的世界！</h3><p>欢迎使用 <a href="https://hexo.io/">Hexo</a> —— 一个快速、简洁且功能强大的博客框架！<br>这是你的第一篇博客，也是你迈向技术写作的第一步。Hexo 支持 Markdown 格式，只需简单编写，即可生成美观的静态网站。  </p><blockquote><p>🎯 <strong>Hexo 的核心优势</strong>  </p><ul><li><strong>闪电般生成速度</strong>：千篇文档秒级生成  </li><li><strong>高度可定制</strong>：超 200+ 主题和插件生态  </li><li><strong>多平台部署</strong>：GitHub Pages、Netlify、Vercel 等一键发布  </li><li><strong>跨平台支持</strong>：Windows&#x2F;macOS&#x2F;Linux 全兼容</li></ul></blockquote><p>如需深入学习，请参考官方文档：<br>📚 <a href="https://hexo.io/docs/">Hexo 官方文档</a> | 🛠️ <a href="https://hexo.io/docs/troubleshooting.html">故障排查指南</a></p><hr><h2 id="🚀-快速入门指南"><a href="#🚀-快速入门指南" class="headerlink" title="🚀 快速入门指南"></a>🚀 快速入门指南</h2><h3 id="1️⃣-创建你的第一篇博客"><a href="#1️⃣-创建你的第一篇博客" class="headerlink" title="1️⃣ 创建你的第一篇博客"></a>1️⃣ 创建你的第一篇博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;我的第一篇博客&quot;</span></span><br></pre></td></tr></table></figure><p>此命令会生成一个 <code>.md</code> 文件，位于 <code>source/_posts/</code> 目录下。<br><strong>进阶技巧</strong>：  </p><ul><li>使用 <code>hexo new draft &quot;草稿标题&quot;</code> 创建草稿（保存在 <code>_drafts</code> 目录）  </li><li>草稿完成后通过 <code>hexo publish &quot;草稿标题&quot;</code> 发布  </li><li>支持自定义模板：<code>hexo new [layout] &lt;title&gt;</code>（默认 layout 为 <code>post</code>）</li></ul><hr><h3 id="2️⃣-启动本地开发服务器"><a href="#2️⃣-启动本地开发服务器" class="headerlink" title="2️⃣ 启动本地开发服务器"></a>2️⃣ 启动本地开发服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:4000/">http://localhost:4000</a> 查看效果。<br><strong>实用参数</strong>：  </p><ul><li>更改端口：<code>hexo server -p 5000</code>  </li><li>静态模式（生产环境）：<code>hexo server -s</code>  </li><li>自定义 IP：<code>hexo server -i 192.168.1.1</code></li></ul><hr><h3 id="3️⃣-生成静态文件"><a href="#3️⃣-生成静态文件" class="headerlink" title="3️⃣ 生成静态文件"></a>3️⃣ 生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成的文件会自动放入 <code>public/</code> 文件夹。<br><strong>自动化建议</strong>：  </p><ul><li>监控文件变化：<code>hexo generate --watch</code>（修改后自动重新生成）  </li><li>清理缓存：<code>hexo clean</code>（解决数据未更新问题）</li></ul><hr><h3 id="4️⃣-一键部署到互联网"><a href="#4️⃣-一键部署到互联网" class="headerlink" title="4️⃣ 一键部署到互联网"></a>4️⃣ 一键部署到互联网</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p><strong>部署配置示例（GitHub Pages）</strong>：<br>在 <code>_config.yml</code> 中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/yourname/yourname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p><strong>支持平台</strong>：  </p><ul><li>GitHub&#x2F;Gitee Pages  </li><li>Netlify&#x2F;Vercel  </li><li>FTP&#x2F;SFTP  </li><li>Heroku<br>完整部署方式请查看 <a href="https://hexo.io/docs/one-command-deployment.html">部署指南</a></li></ul><hr><h2 id="🛠️-进阶操作手册"><a href="#🛠️-进阶操作手册" class="headerlink" title="🛠️ 进阶操作手册"></a>🛠️ 进阶操作手册</h2><h3 id="🎨-主题定制指南"><a href="#🎨-主题定制指南" class="headerlink" title="🎨 主题定制指南"></a>🎨 主题定制指南</h3><ol><li><strong>安装主题</strong>（以 NexT 为例）  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li><li><strong>启用主题</strong>：修改 <code>_config.yml</code>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure></li><li><strong>深度定制</strong>：编辑 <code>themes/next/_config.yml</code>  <ul><li>修改配色方案  </li><li>开启评论系统（Valine&#x2F;Gitalk）  </li><li>添加 SEO 优化配置</li></ul></li></ol><hr><h3 id="🔌-插件生态扩展功能"><a href="#🔌-插件生态扩展功能" class="headerlink" title="🔌 插件生态扩展功能"></a>🔌 插件生态扩展功能</h3><p><strong>推荐插件</strong>：  </p><ul><li>代码高亮：<code>hexo-prism-plugin</code>  </li><li>自动摘要生成：<code>hexo-autodescription</code>  </li><li>生成站点地图：<code>hexo-generator-sitemap</code>  </li><li>RSS 订阅支持：<code>hexo-generator-feed</code></li></ul><p><strong>安装示例</strong>：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-prism-plugin --save</span><br></pre></td></tr></table></figure><p>在 <code>_config.yml</code> 中启用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prism_plugin:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><h3 id="💡-高效写作技巧"><a href="#💡-高效写作技巧" class="headerlink" title="💡 高效写作技巧"></a>💡 高效写作技巧</h3><ol><li><p><strong>Markdown 语法速查</strong>：  </p><ul><li>标题：<code># 一级标题</code> 到 <code>###### 六级标题</code>  </li><li>列表：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 项目1  </span><br><span class="line"><span class="bullet">-</span> 项目2  </span><br><span class="line"><span class="bullet">  -</span> 子项目2.1</span><br></pre></td></tr></table></figure></li><li>代码块：  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```javascript</span></span><br><span class="line"><span class="code">console.log(&quot;Hello World&quot;);</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. **插入图片**：  </span><br><span class="line">   ```markdown</span><br><span class="line">   ![替代文本](/images/your-image.jpg)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>跨文章链接</strong>：  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">点击这里</span>](<span class="link">/posts/your-post-title</span>)</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="🧰-常见问题解决方案"><a href="#🧰-常见问题解决方案" class="headerlink" title="🧰 常见问题解决方案"></a>🧰 常见问题解决方案</h2><h3 id="❗-YAML-解析错误"><a href="#❗-YAML-解析错误" class="headerlink" title="❗ YAML 解析错误"></a>❗ YAML 解析错误</h3><p><strong>错误示例</strong>：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags:technology,linux</span><br></pre></td></tr></table></figure><p><strong>修正写法</strong>：  </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags:</span> [<span class="string">technology</span>, <span class="string">linux</span>]</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">technology</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">linux</span></span><br></pre></td></tr></table></figure><h3 id="🚫-端口占用问题"><a href="#🚫-端口占用问题" class="headerlink" title="🚫 端口占用问题"></a>🚫 端口占用问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: listen EADDRINUSE</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong>：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server -p 5000  <span class="comment"># 更换端口</span></span><br></pre></td></tr></table></figure><h3 id="🧹-内存不足问题"><a href="#🧹-内存不足问题" class="headerlink" title="🧹 内存不足问题"></a>🧹 内存不足问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong>：<br>修改 <code>hexo</code> 可执行文件的内存限制（位于 <code>node_modules/.bin/hexo</code>）：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node --max_old_space_size=8192</span></span><br></pre></td></tr></table></figure><hr><h2 id="📚-深度学习资源推荐"><a href="#📚-深度学习资源推荐" class="headerlink" title="📚 深度学习资源推荐"></a>📚 深度学习资源推荐</h2><ol><li><strong>官方文档</strong>：<a href="https://hexo.io/docs/">Hexo Docs</a>  </li><li><strong>主题市场</strong>：<a href="https://hexo.io/themes/">Hexo Themes</a>  </li><li><strong>插件市场</strong>：<a href="https://hexo.io/plugins/">Hexo Plugins</a>  </li><li><strong>中文社区</strong>：<a href="https://github.com/hexojs/hexo/issues">Hexo 中文论坛</a></li></ol><hr><h2 id="🧪-实战案例分享"><a href="#🧪-实战案例分享" class="headerlink" title="🧪 实战案例分享"></a>🧪 实战案例分享</h2><p><strong>场景：从零搭建 GitHub Pages 博客</strong></p><ol><li>安装 Hexo：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init my-blog</span><br><span class="line"><span class="built_in">cd</span> my-blog &amp;&amp; npm install</span><br></pre></td></tr></table></figure></li><li>配置部署信息：  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">_config.yml:</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/yourname/yourname.github.io</span></span><br></pre></td></tr></table></figure></li><li>生成并部署：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure></li><li>访问：<code>https://yourname.github.io</code></li></ol><hr><h2 id="📝-小结：Hexo-使用路线图"><a href="#📝-小结：Hexo-使用路线图" class="headerlink" title="📝 小结：Hexo 使用路线图"></a>📝 小结：Hexo 使用路线图</h2><table><thead><tr><th>阶段</th><th>推荐操作</th></tr></thead><tbody><tr><td>第1天</td><td>初始化博客、写第一篇文章、本地预览</td></tr><tr><td>第3天</td><td>更换主题、添加插件、配置部署</td></tr><tr><td>第1周</td><td>优化 SEO、添加评论系统、设置自定义域名</td></tr><tr><td>第1月</td><td>编写自动化脚本、搭建 CI&#x2F;CD 流程</td></tr></tbody></table><hr><p>通过这篇指南，你已掌握 Hexo 的核心操作与进阶技巧。现在，是时候开始你的写作之旅了！如果遇到任何问题，欢迎在 <a href="https://github.com/hexojs/hexo/issues">GitHub Issues</a> 提问，社区将为你提供支持。</p>]]></content>
      
      
      
        <tags>
            
            <tag> computer </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust 学习</title>
      <link href="/2025/Rust-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/Rust-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust学习之路"><a href="#Rust学习之路" class="headerlink" title="Rust学习之路"></a>Rust学习之路</h1><h1 id="🦀-Rust-学习之路：第一天"><a href="#🦀-Rust-学习之路：第一天" class="headerlink" title="🦀 Rust 学习之路：第一天"></a>🦀 Rust 学习之路：第一天</h1><h2 id="——-项目创建与编译指南（Linux-Windows-双平台详解）"><a href="#——-项目创建与编译指南（Linux-Windows-双平台详解）" class="headerlink" title="—— 项目创建与编译指南（Linux &amp; Windows 双平台详解）"></a>—— 项目创建与编译指南（Linux &amp; Windows 双平台详解）</h2><hr><h2 id="🧩-一、安装-Rust-开发环境"><a href="#🧩-一、安装-Rust-开发环境" class="headerlink" title="🧩 一、安装 Rust 开发环境"></a>🧩 一、安装 Rust 开发环境</h2><h3 id="✅-Linux-macOS-安装步骤"><a href="#✅-Linux-macOS-安装步骤" class="headerlink" title="✅ Linux&#x2F;macOS 安装步骤"></a>✅ Linux&#x2F;macOS 安装步骤</h3><ol><li><p><strong>安装 <code>rustup</code> 工具链管理器</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br></pre></td></tr></table></figure><ul><li>按提示输入 <code>1</code> 选择默认安装路径（通常为 <code>~/.cargo/bin</code>）。  </li><li>加载环境变量：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.cargo/env</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>验证安装</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rustc --version  <span class="comment"># 查看 Rust 编译器版本</span></span><br><span class="line">cargo --version  <span class="comment"># 查看 Cargo 包管理器版本</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="✅-Windows-安装步骤"><a href="#✅-Windows-安装步骤" class="headerlink" title="✅ Windows 安装步骤"></a>✅ Windows 安装步骤</h3><ol><li><p><strong>下载官方安装程序</strong><br>访问 <a href="https://www.rust-lang.org/tools/install">Rust 安装页面</a> 下载 <code>rustup-init.exe</code>。  </p></li><li><p><strong>运行安装程序</strong>  </p><ul><li>选择默认选项（安装 <code>rustup</code> 和工具链）。  </li><li>确保勾选 “Add Rust to PATH”（自动配置环境变量）。</li></ul></li><li><p><strong>验证安装</strong><br>在 <strong>PowerShell 或 CMD</strong> 中运行：  </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rustc <span class="literal">--version</span></span><br><span class="line">cargo <span class="literal">--version</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="📁-二、创建你的第一个-Rust-项目"><a href="#📁-二、创建你的第一个-Rust-项目" class="headerlink" title="📁 二、创建你的第一个 Rust 项目"></a>📁 二、创建你的第一个 Rust 项目</h2><h3 id="📌-方法-1：使用-Cargo-创建项目（推荐）"><a href="#📌-方法-1：使用-Cargo-创建项目（推荐）" class="headerlink" title="📌 方法 1：使用 Cargo 创建项目（推荐）"></a>📌 方法 1：使用 Cargo 创建项目（推荐）</h3><p>Cargo 是 Rust 的包管理器和构建工具，自动化处理依赖管理和编译流程。</p><h4 id="🔧-Linux-macOS"><a href="#🔧-Linux-macOS" class="headerlink" title="🔧 Linux&#x2F;macOS"></a>🔧 Linux&#x2F;macOS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cargo new myproject</span><br><span class="line"><span class="built_in">cd</span> myproject</span><br></pre></td></tr></table></figure><h4 id="🔧-Windows"><a href="#🔧-Windows" class="headerlink" title="🔧 Windows"></a>🔧 Windows</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cargo new myproject</span><br><span class="line"><span class="built_in">cd</span> myproject</span><br></pre></td></tr></table></figure><h4 id="📁-生成的目录结构"><a href="#📁-生成的目录结构" class="headerlink" title="📁 生成的目录结构"></a>📁 生成的目录结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myproject/</span><br><span class="line">├── Cargo.toml      # 项目配置文件（元数据、依赖）</span><br><span class="line">└── src/</span><br><span class="line">    └── main.rs     # 主程序文件（默认入口）</span><br></pre></td></tr></table></figure><h4 id="📄-main-rs-默认内容"><a href="#📄-main-rs-默认内容" class="headerlink" title="📄 main.rs 默认内容"></a>📄 <code>main.rs</code> 默认内容</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🛠️-三、编译与运行项目"><a href="#🛠️-三、编译与运行项目" class="headerlink" title="🛠️ 三、编译与运行项目"></a>🛠️ 三、编译与运行项目</h2><h3 id="🧪-方法-1：使用-Cargo-编译与运行（推荐）"><a href="#🧪-方法-1：使用-Cargo-编译与运行（推荐）" class="headerlink" title="🧪 方法 1：使用 Cargo 编译与运行（推荐）"></a>🧪 方法 1：使用 Cargo 编译与运行（推荐）</h3><p>Cargo 提供了一站式命令，适合日常开发。</p><h4 id="🔧-Linux-macOS-Windows"><a href="#🔧-Linux-macOS-Windows" class="headerlink" title="🔧 Linux&#x2F;macOS &amp; Windows"></a>🔧 Linux&#x2F;macOS &amp; Windows</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cargo build        <span class="comment"># 编译项目（生成可执行文件在 target/debug/）</span></span><br><span class="line">./target/debug/myproject  <span class="comment"># 运行程序（Linux/macOS）</span></span><br><span class="line">.\target\debug\myproject.exe  <span class="comment"># 运行程序（Windows）</span></span><br></pre></td></tr></table></figure><h4 id="🚀-一键运行"><a href="#🚀-一键运行" class="headerlink" title="🚀 一键运行"></a>🚀 一键运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run          <span class="comment"># 直接编译并运行（适合快速测试）</span></span><br></pre></td></tr></table></figure><h3 id="🧪-方法-2：手动使用-rustc-编译（仅限简单项目）"><a href="#🧪-方法-2：手动使用-rustc-编译（仅限简单项目）" class="headerlink" title="🧪 方法 2：手动使用 rustc 编译（仅限简单项目）"></a>🧪 方法 2：手动使用 <code>rustc</code> 编译（仅限简单项目）</h3><p>适用于单文件项目，不涉及复杂依赖。</p><h4 id="🔧-Linux-macOS-1"><a href="#🔧-Linux-macOS-1" class="headerlink" title="🔧 Linux&#x2F;macOS"></a>🔧 Linux&#x2F;macOS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rustc src/main.rs -o myprogram</span><br><span class="line">./myprogram</span><br></pre></td></tr></table></figure><h4 id="🔧-Windows-1"><a href="#🔧-Windows-1" class="headerlink" title="🔧 Windows"></a>🔧 Windows</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rustc src\main.rs <span class="literal">-o</span> myprogram.exe</span><br><span class="line">.\myprogram.exe</span><br></pre></td></tr></table></figure><hr><h2 id="🧱-四、手动编译的局限性"><a href="#🧱-四、手动编译的局限性" class="headerlink" title="🧱 四、手动编译的局限性"></a>🧱 四、手动编译的局限性</h2><ul><li><strong>无法处理多文件项目</strong>：复杂项目需依赖 Cargo 管理模块和依赖。  </li><li><strong>无自动依赖管理</strong>：需手动下载并链接库文件。</li></ul><hr><h2 id="🧰-五、常见问题与解决方案"><a href="#🧰-五、常见问题与解决方案" class="headerlink" title="🧰 五、常见问题与解决方案"></a>🧰 五、常见问题与解决方案</h2><table><thead><tr><th>问题</th><th>解决方案</th></tr></thead><tbody><tr><td><code>command not found: rustc</code></td><td>确保 <code>~/.cargo/bin</code>（Linux）或 <code>C:\Users\用户名\.cargo\bin</code>（Windows）已加入系统 <code>PATH</code> 环境变量。</td></tr><tr><td><code>failed to download rustc</code></td><td>使用国内镜像加速：</td></tr><tr><td><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup cargo build</span><br></pre></td></tr></table></figure></td><td></td></tr><tr><td><code>linker not found</code>（Windows）</td><td>安装 C++ 构建工具：</td></tr><tr><td>下载 <a href="https://visualstudio.microsoft.com/visual-cpp-build-tools/">Build Tools for Visual Studio</a> 并安装。</td><td></td></tr><tr><td><code>error[E0460]: found possibly newer version of crate &#39;std&#39;</code></td><td>更新工具链：</td></tr><tr><td><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  rustup update</span><br><span class="line">  ``` |</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment">## 📝 六、小贴士</span></span><br><span class="line"></span><br><span class="line">- **查看目录结构**（Linux/macOS）：  </span><br><span class="line">  ```bash</span><br><span class="line">  tree</span><br></pre></td></tr></table></figure></td><td></td></tr></tbody></table><ul><li><strong>使用代码编辑器打开项目</strong>：  <ul><li>VS Code：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure></li><li>Vim&#x2F;VSCode 内置终端直接运行命令。</li></ul></li><li><strong>清理构建文件</strong>：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo clean</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="📚-七、下一步学习建议"><a href="#📚-七、下一步学习建议" class="headerlink" title="📚 七、下一步学习建议"></a>📚 七、下一步学习建议</h2><ol><li><strong>深入学习 Cargo</strong>：  <ul><li>添加依赖：修改 <code>Cargo.toml</code> 中的 <code>[dependencies]</code> 部分。  </li><li>构建发布版本：<code>cargo build --release</code>（优化编译，生成在 <code>target/release/</code>）。</li></ul></li><li><strong>探索官方文档</strong>：  <ul><li><a href="https://rustlang-cn.org/">Rust 中文社区</a>  </li><li><a href="https://doc.rust-lang.org/rust-by-example/">Rust By Example</a></li></ul></li><li><strong>实战练习</strong>：  <ul><li><a href="https://github.com/rust-lang/rustlings">Rustlings</a>：官方练习项目  </li><li><a href="https://rust-lang-nursery.github.io/rust-cookbook/">Rust Cookbook</a>：常见任务代码示例</li></ul></li></ol><hr><p>通过本指南，你已掌握：<br>✅ Rust 的安装与验证<br>✅ 使用 Cargo 创建和管理项目<br>✅ Linux 和 Windows 下的编译与运行方法<br>✅ 常见问题的排查技巧  </p><p>接下来，尝试编写一个包含变量、函数和控制流的小程序，巩固基础语法吧！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash 等终端美化</title>
      <link href="/2024/test1/"/>
      <url>/2024/test1/</url>
      
        <content type="html"><![CDATA[<p>s</p><p>测试网站：内容来自于<a href="https://strider1230.cn/">https://strider1230.cn</a> </p><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p><strong>Oh-My-Posh</strong> 是一款终端个性化工具，支持 Windows、Linux(WSL)、macOS 系统上的 PowerShell、bash、zsh 等终端，可以配置不同主题达到个性化的效果。</p><h2 id="软件特点"><a href="#软件特点" class="headerlink" title="软件特点"></a>软件特点</h2><p><strong>平台和 Shell 无关</strong>：可以在多种操作系统和终端环境中使用。</p><p><strong>易于配置</strong>：用户可以根据需求轻松调整配置。</p><p>**极高的可配置性：**提供多种配置选项，比市面上大多数提示工具更加灵活。</p><p><strong>速度快</strong>：兼顾性能，提高了使用体验。</p><p><strong>支持次级提示</strong>：不仅限于主提示，还提供次级提示支持。</p><p><strong>右侧提示</strong>：在终端界面中可以显示右侧提示。</p><p><strong>瞬态提示</strong>：提供瞬态提示功能，让界面更简洁。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://picx.zhimg.com/v2-0b67dfe3fb6bb374c4b2c8614162774f_1440w.jpg"></p><p><img src="https://pic2.zhimg.com/v2-35cb58a2fb76a40d1c17ac17474702e5_1440w.jpg"></p><h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><h3 id="2-1-包管理器——Scoop"><a href="#2-1-包管理器——Scoop" class="headerlink" title="2.1 包管理器——Scoop"></a>2.1 包管理器——<a href="https://zhida.zhihu.com/search?content_id=254952184&content_type=Article&match_order=1&q=Scoop&zhida_source=entity">Scoop</a></h3><p><strong>2.1.1 为何使用 Scoop 安装</strong></p><p>A：使用 Scoop 作为包管理器来安装开发工具，比如 <code>git</code>、<code>clink</code>，相比直接从微软商店安装或下载安装包，有几个明显的优势：</p><p><strong>更便捷的安装和更新</strong></p><ul><li>Scoop 一行命令就能完成安装，既不需要手动下载安装包，也不必逐个步骤操作。安装完成后可以直接运行，更新时也同样简单，只需运行 <code>scoop update &lt;package_name&gt;</code> 即可完成。</li></ul><p><strong>自动配置环境变量</strong></p><ul><li>Scoop 会将所有已安装软件的快捷方式放在 <code>Scoop\shims</code> 文件夹中，并将该文件夹路径自动加入用户的环境变量 <code>PATH</code> 中。因此，安装完成后可以直接在终端中使用这些命令，而无需手动配置路径。</li></ul><p><strong>轻量又优雅</strong></p><ul><li>Scoop 将所有软件都集中在用户目录下管理，不会修改系统目录。这种优雅的管理方式避免了对系统的影响，也更易于管理和卸载。</li></ul><p>简洁的依赖管理</p><ul><li>Scoop 能自动安装软件的依赖项，避免了手动下载和配置的麻烦，极大简化了安装过程。</li></ul><p>因此，使用 Scoop 不仅能简化安装和更新操作，还减少了配置环境变量的繁琐步骤，是一种方便又优雅的安装方式。</p><p><strong>2.1.2 安装 Scoop</strong></p><p>1. 设置 PowerShell 执行策略</p><p>在安装 Scoop 之前，需允许 PowerShell 执行脚本。可以在 PowerShell 中执行以下命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned -Scope CurrentUser      </span><br></pre></td></tr></table></figure><p>2. 安装 Scoop</p><p>在 PowerShell 中运行以下命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irm get.scoop.sh | iex</span><br></pre></td></tr></table></figure><p>Scoop 安装完成后将自动配置环境变量。在本文中，我们将使用 Scoop 安装相关工具（包括 git 和 clink），使整个安装过程更加高效流畅。</p><p><img src="https://pic3.zhimg.com/v2-8e7ec06257bf237844eed3b0d3af9c14_1440w.jpg"></p><p>确保 <code>scoop\shims</code> 路径已添加到环境变量中（正常情况下会自动添加）：</p><p><img src="https://pic4.zhimg.com/v2-0b759a8257f9609b26e063d61c72e0ef_1440w.jpg"></p><blockquote><p>关于 shims 文件夹：scoop 创建的 shims 文件夹用于存放所有已安装应用的快捷方式，使得在命令行中可以直接调用这些程序，而无需指定完整路径。</p></blockquote><h3 id="2-2-字体"><a href="#2-2-字体" class="headerlink" title="2.2 字体"></a>2.2 字体</h3><p>为了在 oh-my-posh 中正确显示各类图标，我们需要安装支持 <a href="https://zhida.zhihu.com/search?content_id=254952184&content_type=Article&match_order=1&q=Nerd+Fonts&zhida_source=entity">Nerd Fonts</a> 的字体。安装方法如下：</p><p>1. 前往 Nerd Fonts 官方 GitHub 页面 或访问 Nerd Fonts 下载页面 下载 Meslo 或其他字体包；</p><p>2. 解压下载的文件，并右键安装所有<code>.ttf</code>字体文件；</p><p>3.在 <strong><a href="https://zhida.zhihu.com/search?content_id=254952184&content_type=Article&match_order=1&q=Windows+Terminal&zhida_source=entity">Windows Terminal</a></strong> 的设置中选择安装的 Nerd Fonts 字体（例如 MesloLGM NF），确保字体正常显示图标。</p><p>最后推荐使用<code>MesloLGM Nerd Font</code>字体，因为这个间距适中，连续两个回车换行后命令的显示不会挤在一起。</p><h3 id="2-3-终端"><a href="#2-3-终端" class="headerlink" title="2.3 终端"></a>2.3 终端</h3><p>推荐使用 <strong>Windows Terminal</strong> 作为默认终端。作为 Windows 11 自带的终端，它在多标签、个性化配置和多终端支持上表现得非常不错，完全能满足日常使用需求。</p><p>如果你使用的是 Windows 10 或LTSC(老坛酸菜)等精简版系统，可能没有预装 Windows Terminal，这种情况下，可以通过微软商店在线安装。</p><p><img src="https://pic4.zhimg.com/v2-63219c372c8b2b286611ec2247498e8f_1440w.jpg"></p><p><strong>Win11 24H2 LTSC 版本没有微软商店怎么办</strong>，以管理员模式打开 PowerShell，执行以下命令即可安装。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsreset -i</span><br></pre></td></tr></table></figure><h3 id="2-4-配置-Windows-Terminal"><a href="#2-4-配置-Windows-Terminal" class="headerlink" title="2.4 配置 Windows Terminal"></a>2.4 配置 Windows Terminal</h3><p>找到 PowerShell 的外观设置</p><p><img src="https://picx.zhimg.com/v2-a8528fa7a0d2b74a652f6cf615efa3fd_1440w.jpg"></p><p>设置文本样式。</p><p><img src="https://picx.zhimg.com/v2-5f9ca6ef1dd3fd36f0dc7b24a0852e6b_1440w.jpg"></p><p>设置背景图，透明度等。</p><p><img src="https://pic3.zhimg.com/v2-531ca464c2acf208e85b052fb4eb644a_1440w.jpg"></p><p>添加启动参数 <code>-nologo</code> 来隐藏 PowerShell 启动时的欢迎信息。这样，启动 PowerShell 时就不会显示欢迎信息。请注意，这个设置仅适用于 PowerShell，而不适用于 CMD。</p><p><img src="https://pic1.zhimg.com/v2-b8ec887d12352094fa654bcc4b36243c_1440w.jpg"></p><p>同样，你可以设置 CMD 的外观，甚至将 CMD 设置为默认启动的终端（倒反天罡）。</p><p><img src="https://pic1.zhimg.com/v2-7c96207593178044be79fce0b1a7ffda_1440w.jpg"></p><p><img src="https://pic3.zhimg.com/v2-50f97edf0b49c13307911c21dc9533de_1440w.jpg"></p><h2 id="三、配置美化-PowerShell"><a href="#三、配置美化-PowerShell" class="headerlink" title="三、配置美化 PowerShell"></a><strong>三、配置美化 PowerShell</strong></h2><h3 id="3-1-安装-oh-my-posh"><a href="#3-1-安装-oh-my-posh" class="headerlink" title="3.1 安装 oh-my-posh"></a><strong>3.1 安装 oh-my-posh</strong></h3><p>通过微软商店直接下载 <strong>oh-my-posh。</strong></p><p>**</p><p><img src="https://pica.zhimg.com/v2-73201b5d409ba3fcd3af60dd481f7306_1440w.jpg"></p><p>**</p><h3 id="3-2-激活-oh-my-posh"><a href="#3-2-激活-oh-my-posh" class="headerlink" title="3.2 激活 oh-my-posh"></a>3.2 <strong>激活 oh-my-posh</strong></h3><p>为了让 oh-my-posh 在 PowerShell 启动时自动激活，需编辑 PowerShell 配置文件。</p><p>打开配置文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad $PROFILE</span><br></pre></td></tr></table></figure><p>如果找不到 $PROFILE 文件，可以使用以下命令创建：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New-Item -Path $PROFILE -Type File -Force</span><br></pre></td></tr></table></figure><p>在配置文件中添加以下内容以初始化：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh | Invoke-Expression</span><br></pre></td></tr></table></figure><p>配置文件的路径如下图所示：</p><p><img src="https://picx.zhimg.com/v2-4e0d2a792a9adc5d039629205504a87f_1440w.jpg"></p><h3 id="3-3-配置主题"><a href="#3-3-配置主题" class="headerlink" title="3.3 配置主题"></a>3.3 配置主题</h3><p><strong>3.3.1 查看主题列表</strong></p><p><strong>oh-my-posh</strong> 提供了多种美观的预设主题。使用以下命令查看所有可用的主题：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-PoshThemes</span><br></pre></td></tr></table></figure><p>运行该命令后，会显示很多的主题，每个主题的名称会显示在主题的上方。</p><p>3.3.2 使用自定义主题</p><p>可以在初始化命令中指定自定义主题路径，即在初始化代码后添加<code>--config &quot;$env:POSH_THEMES_PATH\&lt;主题名&gt;.omp.json&quot;</code>。</p><p>以下为完整配置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH\montys.omp.json&quot; | Invoke-Expression</span><br></pre></td></tr></table></figure><h3 id="3-4-图标美化"><a href="#3-4-图标美化" class="headerlink" title="3.4 图标美化"></a>3.4 图标美化</h3><p><strong>Terminal-Icons</strong> 是一个 PowerShell 模块，用于在 Windows 终端中为文件和文件夹添加图标。它基于文件名称或扩展名自动分配图标，若找不到相应的图标，则使用通用图标。</p><p>执行以下命令安装该模块：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Module -Name Terminal-Icons -Repository PSGallery</span><br></pre></td></tr></table></figure><p>安装后，在 PowerShell 配置文件 ($PROFILE) 中添加以下行以启用该插件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module Terminal-Icons</span><br></pre></td></tr></table></figure><p>效果展示：</p><p><img src="https://pic1.zhimg.com/v2-a954af12e27c1fd6aa9df1da01f5b278_1440w.jpg"></p><h3 id="3-5-安装插件模块"><a href="#3-5-安装插件模块" class="headerlink" title="3.5 安装插件模块"></a>3.5 安装插件模块</h3><p>完成3.1-3.4以上操作后，PowerShell 中已启用 <strong>oh-my-posh</strong> 的美化效果。接下来是一些进阶操作，旨在进一步提升 PowerShell 的使用体验，使其具备类似 <strong>Mac</strong> 上的 <strong>oh-my-zsh</strong> 功能，涵盖语法高亮、错误提示、多行编辑、快捷键绑定、自动补全、历史搜索及 Git 扩展显示等：</p><p><strong>3.5.1 安装 PSReadLine</strong></p><p><strong>PSReadLine</strong> 提供语法高亮、错误提示、多行编辑、键绑定、历史记录搜索等功能，提升命令行体验。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Module PSReadLine</span><br></pre></td></tr></table></figure><p><strong>3.5.2 安装 posh-git</strong></p><p><strong>posh-git</strong> 可以在 PowerShell 中显示 Git 状态信息，并提供 Git 命令的自动补全。</p><p>安装命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Module posh-git</span><br></pre></td></tr></table></figure><p>在 PowerShell 配置文件 (<code>$PROFILE</code>) 中添加以下行以启用该插件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module posh-git</span><br></pre></td></tr></table></figure><p><strong>3.5.3 安装 ZLocation</strong></p><p><strong>ZLocation</strong> 插件类似于 <code>autojump</code>或 <code>Zsh-z</code>，通过关键字直接跳转到指定目录，提升效率。</p><p>1. 安装 ZLocation 插件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Module ZLocation </span><br></pre></td></tr></table></figure><p>2. 修改配置文件：</p><p>打开 PowerShell 配置文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad $PROFILE</span><br></pre></td></tr></table></figure><p>在文件末尾添加：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module ZLocation</span><br></pre></td></tr></table></figure><p><strong>ZLocation 使用示例</strong></p><ul><li>查看已知的目录：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z</span><br></pre></td></tr></table></figure><ul><li>跳转到包含指定字串的目录（支持 Tab 补全）：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z doc</span><br></pre></td></tr></table></figure><ul><li>回到上一个访问的目录：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z -</span><br></pre></td></tr></table></figure><h3 id="3-6-编辑-PowerShell-配置文件"><a href="#3-6-编辑-PowerShell-配置文件" class="headerlink" title="3.6 编辑 PowerShell 配置文件"></a><strong>3.6 编辑 PowerShell 配置文件</strong></h3><p>配置文件的作用是在 PowerShell 启动时运行一些自定义的设置，比如导入模块、设置别名、定义函数等。</p><p>以下是我的配置文件，大家可以参考注释根据自己需求修改或者删除：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 初始化 oh-my-posh</span><br><span class="line">C:\\Users\\Strider（改为你自己的用户名）\\AppData\\Local\\Programs\\oh-my-posh\\bin\\oh-my-posh.exe init pwsh --config $env:POSH_THEMES_PATH\cloud-native-azuree.json | Invoke-Expression</span><br><span class="line"># 引入所需模块</span><br><span class="line">Import-Module posh-git # 引入 posh-git</span><br><span class="line">Import-Module PSReadLine # 历史命令联想</span><br><span class="line">Import-Module Terminal-Icons</span><br><span class="line">Import-Module ZLocation</span><br><span class="line"># 设置 PSReadLine 的生效场景</span><br><span class="line">Set-PSReadLineOption -PredictionSource History</span><br><span class="line">Set-PSReadLineOption -PredictionViewStyle ListView</span><br><span class="line"># 设置预测文本来源为历史记录 </span><br><span class="line">Set-PSReadLineOption -PredictionSource History </span><br><span class="line"># 设置 Tab 为菜单补全和 Intellisense </span><br><span class="line">Set-PSReadLineKeyHandler -Key &quot;Tab&quot; -Function MenuComplete </span><br><span class="line"># 每次回溯输入历史，光标定位于输入内容末尾 </span><br><span class="line">Set-PSReadLineOption -HistorySearchCursorMovesToEnd </span><br><span class="line"># 设置向上键为后向搜索历史记录 </span><br><span class="line">Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward </span><br><span class="line"># 设置向下键为前向搜索历史纪录 </span><br><span class="line">Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward</span><br></pre></td></tr></table></figure><h2 id="四、配置美化-CMD"><a href="#四、配置美化-CMD" class="headerlink" title="四、配置美化 CMD"></a>四、配置美化 CMD</h2><h3 id="4-1-什么是clink？"><a href="#4-1-什么是clink？" class="headerlink" title="4.1 什么是clink？"></a>4.1 什么是clink？</h3><p><strong>clink</strong> 是一款增强 CMD 功能的小工具，支持自动补全、命令历史等功能，极大提升了 CMD 的使用体验。</p><h3 id="4-2-安装-clink"><a href="#4-2-安装-clink" class="headerlink" title="4.2 安装 clink"></a>4.2 安装 clink</h3><p>在 CMD 中直接使用 scoop 安装 clink：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install clink</span><br></pre></td></tr></table></figure><h3 id="4-3-激活-clink"><a href="#4-3-激活-clink" class="headerlink" title="4.3 激活 clink"></a>4.3 激活 clink</h3><p>可以通过 <code>autorun</code> 命令设置 clink 自动运行，并使用 <code>quiet</code> 参数。这样每次启动 CMD 时，clink 会自动启用并禁用启动提示信息：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clink autorun install -- --quiet</span><br></pre></td></tr></table></figure><p>使用 <code>quiet</code> 参数前后的效果如下：</p><p>（使用前）</p><p><img src="https://pic1.zhimg.com/v2-2e90576b21c6a4795c27ad64c82ea00c_1440w.jpg"></p><p>（使用后）</p><p><img src="https://pic1.zhimg.com/v2-855d4c4ad47d288aa55081ebfcffb304_1440w.jpg"></p><h3 id="4-4-启用自动补全"><a href="#4-4-启用自动补全" class="headerlink" title="4.4 启用自动补全"></a>4.4 启用自动补全</h3><p>clink 支持 <code>autosuggest</code> 自动补全功能，类似于 shell 中的 zsh 自动建议。可以通过以下命令启用该功能：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clink set autosuggest.enable true</span><br></pre></td></tr></table></figure><h3 id="4-5-查看配置信息"><a href="#4-5-查看配置信息" class="headerlink" title="4.5 查看配置信息"></a>4.5 查看配置信息</h3><p>可以使用以下命令查看当前的 clink 配置信息：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clink info</span><br></pre></td></tr></table></figure><h3 id="4-6-配置-oh-my-posh-样式"><a href="#4-6-配置-oh-my-posh-样式" class="headerlink" title="4.6 配置 oh-my-posh 样式"></a>4.6 配置 oh-my-posh 样式</h3><p>如果希望在 CMD 中同样展示 <strong>oh-my-posh</strong> 的样式，可以通过 Lua 脚本加载主题。具体步骤如下：</p><p><strong>创建 Lua 配置文件</strong></p><p>在 <code>C:\Users\&lt;用户名&gt;\AppData\Local\clink</code> 目录下，新建一个名为 <code>oh-my-posh.lua</code> 的文件。</p><p><strong>加载 oh-my-posh 主题</strong></p><p>在文件中写入以下代码，以将 oh-my-posh 的样式应用到 CMD：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load(io.popen(&#x27;oh-my-posh init cmd&#x27;):read(&quot;*a&quot;))() </span><br></pre></td></tr></table></figure><p>配置完成后，重新打开 CMD，即可看到应用了 <strong>oh-my-posh</strong> 的自定义提示符样式。</p><h3 id="4-7-使用-CMD-脚本预先配置-Alias"><a href="#4-7-使用-CMD-脚本预先配置-Alias" class="headerlink" title="4.7 使用 CMD 脚本预先配置 Alias"></a>4.7 使用 CMD 脚本预先配置 Alias</h3><p>通过 Clink，可以在 CMD 中为常用的 Linux 命令（如 <code>ls</code>、<code>rm</code> 等）创建别名（alias），帮助习惯 Linux 命令行的用户更轻松地适应 CMD 控制台。</p><p>在 Windows 系统上设置 alias 通常使用 <code>doskey</code> 命令，并可以借助 Clink 工具，在 CMD 启动时自动执行脚本来加载这些 alias。默认情况下，Clink 会从 <code>C:\Users\&lt;username&gt;\AppData\Local\clink</code> 目录中查找 <code>clink_start.cmd</code> 文件来进行初始化。</p><p>可以在该目录下创建 <code>clink_start.cmd</code> 文件，并添加以下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@echo off </span><br><span class="line">doskey ls=dir </span><br><span class="line">doskey rm=del </span><br><span class="line">doskey cp=copy </span><br><span class="line">doskey mv=move </span><br><span class="line">doskey of=explorer.exe .</span><br></pre></td></tr></table></figure><p>保存文件后，这些 <code>doskey</code> 指令将在 CMD 下次启动时自动执行，从而实现 alias 效果。</p><h2 id="五、美化-VScode-内终端"><a href="#五、美化-VScode-内终端" class="headerlink" title="五、美化 VScode 内终端"></a>五、美化 VScode 内终端</h2><p>在 VScode 里使用终端，可能会出现乱码或者图标不显示情况，设置一下字体就行，直接输入你上面配置的 oh-my-posh 字体 如： MesloLGM Nerd Font。</p><p><img src="https://pic1.zhimg.com/v2-5e14ed81bab8a24ca48cf3358f25c6e8_1440w.jpg"></p><p>效果展示如下：</p><p><img src="https://pic4.zhimg.com/v2-57711ca22bd1f4e20ab769c12a47fe39_1440w.jpg"></p><h2 id="六、结语"><a href="#六、结语" class="headerlink" title="六、结语"></a>六、结语</h2><p><strong>oh-my-posh</strong> 总体体验上还不错，能够方便的展示 git 相关的信息，但是性能拉胯，每次终端可能需要0.5s到2s之间的延迟卡顿，相比于 Linux 和 Mac 上的 Shell 要慢上不少，<strong>最后提一句：国补之后的铭凡原子侠G7 PT迷你主机是真的香啊，兄弟们赶紧点击我文章中的链接冲起来吧！</strong></p><p><strong>END</strong></p><blockquote><p>攻城狮阿程一个喜欢IT也懂土木工程的运维攻城狮。<br>运维入行，直至信创、网安、OpenWrt、虚拟技术、Docker 容器。<br>岗位历经网络工程、运维、项目经理、信息安全。<br>主要渠道：个人淘宝店：阿程数码<br>知乎：攻城狮阿程<br>个人公众号：攻城狮阿程<br>个人博客：<a href="https://strider1230.cn/">https://strider1230.cn</a><br>小红书：果冻橙是橘子吗の快乐生活<br>知识星球：阿程的资源社区（待完善）<br>抖音炉石传说：果冻橙是橘子吗<br>其他渠道持续拓展中</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Computer-Science </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Rust Article</title>
      <link href="/2023/my-first-rust-article/"/>
      <url>/2023/my-first-rust-article/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="🦀-学习-Rust：从零开始的编程之旅"><a href="#🦀-学习-Rust：从零开始的编程之旅" class="headerlink" title="🦀 学习 Rust：从零开始的编程之旅"></a>🦀 学习 Rust：从零开始的编程之旅</h1><h2 id="——-安装指南-第一个程序-基础概念速览"><a href="#——-安装指南-第一个程序-基础概念速览" class="headerlink" title="—— 安装指南 + 第一个程序 + 基础概念速览"></a>—— 安装指南 + 第一个程序 + 基础概念速览</h2><hr><h2 id="🧠-为什么选择-Rust？"><a href="#🧠-为什么选择-Rust？" class="headerlink" title="🧠 为什么选择 Rust？"></a>🧠 为什么选择 Rust？</h2><p>Rust 是一门现代的系统级编程语言，专注于安全性、性能和并发。它通过独特的 <strong>所有权（Ownership）</strong> 和 <strong>借用（Borrowing）</strong> 机制，在编译期避免空指针、数据竞争等常见错误，同时保持接近 C&#x2F;C++ 的性能。<br><strong>适用场景</strong>：  </p><ul><li>系统编程（操作系统、驱动）  </li><li>区块链开发（Solana、Polkadot）  </li><li>Web 后端（Actix、Rocket）  </li><li>嵌入式开发</li></ul><hr><h2 id="🚀-第一步：安装-Rust"><a href="#🚀-第一步：安装-Rust" class="headerlink" title="🚀 第一步：安装 Rust"></a>🚀 第一步：安装 Rust</h2><h3 id="📌-使用-rustup-安装（官方推荐）"><a href="#📌-使用-rustup-安装（官方推荐）" class="headerlink" title="📌 使用 rustup 安装（官方推荐）"></a>📌 使用 <code>rustup</code> 安装（官方推荐）</h3><p><code>rustup</code> 是 Rust 的官方工具链管理器，支持多平台安装和版本切换。</p><h3 id="✅-Linux-macOS-安装步骤"><a href="#✅-Linux-macOS-安装步骤" class="headerlink" title="✅ Linux&#x2F;macOS 安装步骤"></a>✅ Linux&#x2F;macOS 安装步骤</h3><p>打开终端，运行以下命令：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br></pre></td></tr></table></figure><ul><li>按提示输入 <code>1</code> 选择默认安装路径（通常为 <code>~/.cargo/bin</code>）。  </li><li>安装完成后，执行以下命令加载环境变量：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/.cargo/env</span><br></pre></td></tr></table></figure></li></ul><h3 id="✅-Windows-安装步骤"><a href="#✅-Windows-安装步骤" class="headerlink" title="✅ Windows 安装步骤"></a>✅ Windows 安装步骤</h3><ol><li>下载 <a href="https://www.rust-lang.org/tools/install">Rust 安装程序</a>。  </li><li>双击运行，选择默认选项（安装 <code>rustup</code> 和工具链）。  </li><li>使用 <strong>PowerShell</strong> 或 <strong>CMD</strong> 验证安装。</li></ol><h3 id="🧪-验证安装"><a href="#🧪-验证安装" class="headerlink" title="🧪 验证安装"></a>🧪 验证安装</h3><p>运行以下命令检查 Rust 版本：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rustc --version</span><br><span class="line"><span class="comment"># 输出示例：rustc 1.70.0 (example-hash 2023-06-29)</span></span><br></pre></td></tr></table></figure><p>同时验证 <code>Cargo</code>（Rust 的包管理器）：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cargo --version</span><br><span class="line"><span class="comment"># 输出示例：cargo 1.70.0 (example-hash 2023-06-29)</span></span><br></pre></td></tr></table></figure><hr><h2 id="🧱-编写你的第一个-Rust-程序"><a href="#🧱-编写你的第一个-Rust-程序" class="headerlink" title="🧱 编写你的第一个 Rust 程序"></a>🧱 编写你的第一个 Rust 程序</h2><h3 id="📁-步骤-1：创建项目目录"><a href="#📁-步骤-1：创建项目目录" class="headerlink" title="📁 步骤 1：创建项目目录"></a>📁 步骤 1：创建项目目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/rust-projects</span><br><span class="line"><span class="built_in">cd</span> ~/rust-projects</span><br></pre></td></tr></table></figure><h3 id="📄-步骤-2：编写代码"><a href="#📄-步骤-2：编写代码" class="headerlink" title="📄 步骤 2：编写代码"></a>📄 步骤 2：编写代码</h3><p>创建文件 <code>main.rs</code>（Rust 的源码扩展名）：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano hello.rs  <span class="comment"># 或使用 VS Code 等编辑器</span></span><br></pre></td></tr></table></figure><p>粘贴以下代码：  </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, Rustaceans! 🦀&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存并退出（<code>Ctrl+O</code> 写入，<code>Ctrl+X</code> 退出 Nano）。</p><h3 id="🔨-步骤-3：编译并运行"><a href="#🔨-步骤-3：编译并运行" class="headerlink" title="🔨 步骤 3：编译并运行"></a>🔨 步骤 3：编译并运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rustc hello.rs</span><br><span class="line">./hello</span><br><span class="line"><span class="comment"># 输出：Hello, Rustaceans! 🦀</span></span><br></pre></td></tr></table></figure><blockquote><p>📝 <strong>代码解析</strong>  </p><ul><li><code>fn main()</code>：程序入口函数。  </li><li><code>println!</code>：宏（macro），用于输出文本。  </li><li><code>!</code> 表示这是一个宏调用，而非普通函数。</li></ul></blockquote><hr><h2 id="🧰-使用-Cargo-管理项目（推荐）"><a href="#🧰-使用-Cargo-管理项目（推荐）" class="headerlink" title="🧰 使用 Cargo 管理项目（推荐）"></a>🧰 使用 Cargo 管理项目（推荐）</h2><h3 id="📌-创建新项目"><a href="#📌-创建新项目" class="headerlink" title="📌 创建新项目"></a>📌 创建新项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cargo new hello_cargo</span><br><span class="line"><span class="built_in">cd</span> hello_cargo</span><br></pre></td></tr></table></figure><p>生成的目录结构：  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello_cargo/</span><br><span class="line">├── Cargo.toml      # 项目配置文件</span><br><span class="line">└── src/</span><br><span class="line">    └── main.rs     # 默认主程序文件</span><br></pre></td></tr></table></figure><h3 id="📦-构建并运行"><a href="#📦-构建并运行" class="headerlink" title="📦 构建并运行"></a>📦 构建并运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cargo build        <span class="comment"># 编译（生成可执行文件在 target/debug/）</span></span><br><span class="line">./target/debug/hello_cargo</span><br><span class="line"><span class="comment"># 输出：Hello, world!</span></span><br></pre></td></tr></table></figure><p>或直接运行：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run</span><br></pre></td></tr></table></figure><hr><h2 id="📚-基础概念速览"><a href="#📚-基础概念速览" class="headerlink" title="📚 基础概念速览"></a>📚 基础概念速览</h2><h3 id="📌-变量与不可变性"><a href="#📌-变量与不可变性" class="headerlink" title="📌 变量与不可变性"></a>📌 变量与不可变性</h3><p>Rust 默认变量是不可变的（immutable），需显式使用 <code>mut</code> 声明可变变量：  </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;          <span class="comment">// 不可变变量</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">y</span> = <span class="number">10</span>;     <span class="comment">// 可变变量</span></span><br><span class="line">y = <span class="number">15</span>;             <span class="comment">// 合法</span></span><br></pre></td></tr></table></figure><h3 id="📌-数据类型"><a href="#📌-数据类型" class="headerlink" title="📌 数据类型"></a>📌 数据类型</h3><ul><li><strong>标量类型</strong>：整数（<code>i32</code>, <code>u64</code>）、浮点数（<code>f32</code>, <code>f64</code>）、布尔值（<code>bool</code>）、字符（<code>char</code>）。  </li><li><strong>复合类型</strong>：元组（<code>tuple</code>）、数组（<code>array</code>）。</li></ul><h3 id="📌-控制流"><a href="#📌-控制流" class="headerlink" title="📌 控制流"></a>📌 控制流</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> y &gt; <span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y is greater than 10&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y is 10 or less&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">number</span> <span class="keyword">in</span> <span class="number">1</span>..=<span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="📖-进阶学习资源推荐"><a href="#📖-进阶学习资源推荐" class="headerlink" title="📖 进阶学习资源推荐"></a>📖 进阶学习资源推荐</h2><ol><li><strong>官方文档</strong>：  <ul><li><a href="https://kaisery.github.io/trpl-zh-cn/">The Rust Programming Language（中文版）</a>  </li><li><a href="https://doc.rust-lang.org/rust-by-example/">Rust By Example</a></li></ul></li><li><strong>社区与论坛</strong>：  <ul><li><a href="https://rustlang-cn.org/">Rust 中文社区</a>  </li><li><a href="https://bbs.rustlang.org.cn/">Rust 语言中文论坛</a></li></ul></li><li><strong>实战项目</strong>：  <ul><li><a href="https://github.com/rust-lang/rustlings">Rustlings</a>：官方练习项目  </li><li><a href="https://rust-lang-nursery.github.io/rust-cookbook/">Rust Cookbook</a>：常见任务代码示例</li></ul></li></ol><hr><h2 id="⚠️-常见问题与解决方案"><a href="#⚠️-常见问题与解决方案" class="headerlink" title="⚠️ 常见问题与解决方案"></a>⚠️ 常见问题与解决方案</h2><table><thead><tr><th>问题</th><th>解决方案</th></tr></thead><tbody><tr><td><code>rustc</code> 或 <code>cargo</code> 命令未找到</td><td>确保 <code>~/.cargo/bin</code> 已加入 <code>PATH</code> 环境变量</td></tr><tr><td>安装过程中网络超时</td><td>使用国内镜像（如中科大源）：<code>RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</code></td></tr><tr><td>编译报错 <code>cannot find crate</code></td><td>使用 <code>cargo build</code> 替代 <code>rustc</code>，依赖管理更简单</td></tr><tr><td>版本冲突</td><td>更新工具链：<code>rustup update</code></td></tr></tbody></table><hr><h2 id="🎉-总结"><a href="#🎉-总结" class="headerlink" title="🎉 总结"></a>🎉 总结</h2><p>通过本文，你已掌握：<br>✅ Rust 的安装与验证<br>✅ 编写并运行第一个程序<br>✅ 使用 Cargo 管理项目<br>✅ 基础语法速览<br>下一步，尝试阅读《Rust 圣经》或参与开源项目，深入探索这门安全高效的现代语言吧！</p><p>如果遇到问题，欢迎在评论区留言，或前往 <a href="https://rustlang-cn.org/">Rust 中文社区</a> 寻求帮助。祝你编程愉快！🦀</p>]]></content>
      
      
      <categories>
          
          <category> Computer-Science </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Programming </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
