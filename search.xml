<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Rust 学习</title>
      <link href="/2025/Rust-%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/Rust-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust学习之路"><a href="#Rust学习之路" class="headerlink" title="Rust学习之路"></a>Rust学习之路</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new myproject</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/test1/"/>
      <url>/2025/test1/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>测试网站：内容来自于<a href="https://strider1230.cn/">https://strider1230.cn</a> </p><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p><strong>Oh-My-Posh</strong> 是一款终端个性化工具，支持 Windows、Linux(WSL)、macOS 系统上的 PowerShell、bash、zsh 等终端，可以配置不同主题达到个性化的效果。</p><h2 id="软件特点"><a href="#软件特点" class="headerlink" title="软件特点"></a>软件特点</h2><p><strong>平台和 Shell 无关</strong>：可以在多种操作系统和终端环境中使用。</p><p><strong>易于配置</strong>：用户可以根据需求轻松调整配置。</p><p>**极高的可配置性：**提供多种配置选项，比市面上大多数提示工具更加灵活。</p><p><strong>速度快</strong>：兼顾性能，提高了使用体验。</p><p><strong>支持次级提示</strong>：不仅限于主提示，还提供次级提示支持。</p><p><strong>右侧提示</strong>：在终端界面中可以显示右侧提示。</p><p><strong>瞬态提示</strong>：提供瞬态提示功能，让界面更简洁。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://picx.zhimg.com/v2-0b67dfe3fb6bb374c4b2c8614162774f_1440w.jpg"></p><p><img src="https://pic2.zhimg.com/v2-35cb58a2fb76a40d1c17ac17474702e5_1440w.jpg"></p><h2 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h2><h3 id="2-1-包管理器——Scoop"><a href="#2-1-包管理器——Scoop" class="headerlink" title="2.1 包管理器——Scoop"></a>2.1 包管理器——<a href="https://zhida.zhihu.com/search?content_id=254952184&content_type=Article&match_order=1&q=Scoop&zhida_source=entity">Scoop</a></h3><p><strong>2.1.1 为何使用 Scoop 安装</strong></p><p>A：使用 Scoop 作为包管理器来安装开发工具，比如 <code>git</code>、<code>clink</code>，相比直接从微软商店安装或下载安装包，有几个明显的优势：</p><p><strong>更便捷的安装和更新</strong></p><ul><li>Scoop 一行命令就能完成安装，既不需要手动下载安装包，也不必逐个步骤操作。安装完成后可以直接运行，更新时也同样简单，只需运行 <code>scoop update &lt;package_name&gt;</code> 即可完成。</li></ul><p><strong>自动配置环境变量</strong></p><ul><li>Scoop 会将所有已安装软件的快捷方式放在 <code>Scoop\shims</code> 文件夹中，并将该文件夹路径自动加入用户的环境变量 <code>PATH</code> 中。因此，安装完成后可以直接在终端中使用这些命令，而无需手动配置路径。</li></ul><p><strong>轻量又优雅</strong></p><ul><li>Scoop 将所有软件都集中在用户目录下管理，不会修改系统目录。这种优雅的管理方式避免了对系统的影响，也更易于管理和卸载。</li></ul><p>简洁的依赖管理</p><ul><li>Scoop 能自动安装软件的依赖项，避免了手动下载和配置的麻烦，极大简化了安装过程。</li></ul><p>因此，使用 Scoop 不仅能简化安装和更新操作，还减少了配置环境变量的繁琐步骤，是一种方便又优雅的安装方式。</p><p><strong>2.1.2 安装 Scoop</strong></p><p>1. 设置 PowerShell 执行策略</p><p>在安装 Scoop 之前，需允许 PowerShell 执行脚本。可以在 PowerShell 中执行以下命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned -Scope CurrentUser      </span><br></pre></td></tr></table></figure><p>2. 安装 Scoop</p><p>在 PowerShell 中运行以下命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irm get.scoop.sh | iex</span><br></pre></td></tr></table></figure><p>Scoop 安装完成后将自动配置环境变量。在本文中，我们将使用 Scoop 安装相关工具（包括 git 和 clink），使整个安装过程更加高效流畅。</p><p><img src="https://pic3.zhimg.com/v2-8e7ec06257bf237844eed3b0d3af9c14_1440w.jpg"></p><p>确保 <code>scoop\shims</code> 路径已添加到环境变量中（正常情况下会自动添加）：</p><p><img src="https://pic4.zhimg.com/v2-0b759a8257f9609b26e063d61c72e0ef_1440w.jpg"></p><blockquote><p>关于 shims 文件夹：scoop 创建的 shims 文件夹用于存放所有已安装应用的快捷方式，使得在命令行中可以直接调用这些程序，而无需指定完整路径。</p></blockquote><h3 id="2-2-字体"><a href="#2-2-字体" class="headerlink" title="2.2 字体"></a>2.2 字体</h3><p>为了在 oh-my-posh 中正确显示各类图标，我们需要安装支持 <a href="https://zhida.zhihu.com/search?content_id=254952184&content_type=Article&match_order=1&q=Nerd+Fonts&zhida_source=entity">Nerd Fonts</a> 的字体。安装方法如下：</p><p>1. 前往 Nerd Fonts 官方 GitHub 页面 或访问 Nerd Fonts 下载页面 下载 Meslo 或其他字体包；</p><p>2. 解压下载的文件，并右键安装所有<code>.ttf</code>字体文件；</p><p>3.在 <strong><a href="https://zhida.zhihu.com/search?content_id=254952184&content_type=Article&match_order=1&q=Windows+Terminal&zhida_source=entity">Windows Terminal</a></strong> 的设置中选择安装的 Nerd Fonts 字体（例如 MesloLGM NF），确保字体正常显示图标。</p><p>最后推荐使用<code>MesloLGM Nerd Font</code>字体，因为这个间距适中，连续两个回车换行后命令的显示不会挤在一起。</p><h3 id="2-3-终端"><a href="#2-3-终端" class="headerlink" title="2.3 终端"></a>2.3 终端</h3><p>推荐使用 <strong>Windows Terminal</strong> 作为默认终端。作为 Windows 11 自带的终端，它在多标签、个性化配置和多终端支持上表现得非常不错，完全能满足日常使用需求。</p><p>如果你使用的是 Windows 10 或LTSC(老坛酸菜)等精简版系统，可能没有预装 Windows Terminal，这种情况下，可以通过微软商店在线安装。</p><p><img src="https://pic4.zhimg.com/v2-63219c372c8b2b286611ec2247498e8f_1440w.jpg"></p><p><strong>Win11 24H2 LTSC 版本没有微软商店怎么办</strong>，以管理员模式打开 PowerShell，执行以下命令即可安装。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsreset -i</span><br></pre></td></tr></table></figure><h3 id="2-4-配置-Windows-Terminal"><a href="#2-4-配置-Windows-Terminal" class="headerlink" title="2.4 配置 Windows Terminal"></a>2.4 配置 Windows Terminal</h3><p>找到 PowerShell 的外观设置</p><p><img src="https://picx.zhimg.com/v2-a8528fa7a0d2b74a652f6cf615efa3fd_1440w.jpg"></p><p>设置文本样式。</p><p><img src="https://picx.zhimg.com/v2-5f9ca6ef1dd3fd36f0dc7b24a0852e6b_1440w.jpg"></p><p>设置背景图，透明度等。</p><p><img src="https://pic3.zhimg.com/v2-531ca464c2acf208e85b052fb4eb644a_1440w.jpg"></p><p>添加启动参数 <code>-nologo</code> 来隐藏 PowerShell 启动时的欢迎信息。这样，启动 PowerShell 时就不会显示欢迎信息。请注意，这个设置仅适用于 PowerShell，而不适用于 CMD。</p><p><img src="https://pic1.zhimg.com/v2-b8ec887d12352094fa654bcc4b36243c_1440w.jpg"></p><p>同样，你可以设置 CMD 的外观，甚至将 CMD 设置为默认启动的终端（倒反天罡）。</p><p><img src="https://pic1.zhimg.com/v2-7c96207593178044be79fce0b1a7ffda_1440w.jpg"></p><p><img src="https://pic3.zhimg.com/v2-50f97edf0b49c13307911c21dc9533de_1440w.jpg"></p><h2 id="三、配置美化-PowerShell"><a href="#三、配置美化-PowerShell" class="headerlink" title="三、配置美化 PowerShell"></a><strong>三、配置美化 PowerShell</strong></h2><h3 id="3-1-安装-oh-my-posh"><a href="#3-1-安装-oh-my-posh" class="headerlink" title="3.1 安装 oh-my-posh"></a><strong>3.1 安装 oh-my-posh</strong></h3><p>通过微软商店直接下载 <strong>oh-my-posh。</strong></p><p>**</p><p><img src="https://pica.zhimg.com/v2-73201b5d409ba3fcd3af60dd481f7306_1440w.jpg"></p><p>**</p><h3 id="3-2-激活-oh-my-posh"><a href="#3-2-激活-oh-my-posh" class="headerlink" title="3.2 激活 oh-my-posh"></a>3.2 <strong>激活 oh-my-posh</strong></h3><p>为了让 oh-my-posh 在 PowerShell 启动时自动激活，需编辑 PowerShell 配置文件。</p><p>打开配置文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad $PROFILE</span><br></pre></td></tr></table></figure><p>如果找不到 $PROFILE 文件，可以使用以下命令创建：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New-Item -Path $PROFILE -Type File -Force</span><br></pre></td></tr></table></figure><p>在配置文件中添加以下内容以初始化：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh | Invoke-Expression</span><br></pre></td></tr></table></figure><p>配置文件的路径如下图所示：</p><p><img src="https://picx.zhimg.com/v2-4e0d2a792a9adc5d039629205504a87f_1440w.jpg"></p><h3 id="3-3-配置主题"><a href="#3-3-配置主题" class="headerlink" title="3.3 配置主题"></a>3.3 配置主题</h3><p><strong>3.3.1 查看主题列表</strong></p><p><strong>oh-my-posh</strong> 提供了多种美观的预设主题。使用以下命令查看所有可用的主题：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-PoshThemes</span><br></pre></td></tr></table></figure><p>运行该命令后，会显示很多的主题，每个主题的名称会显示在主题的上方。</p><p>3.3.2 使用自定义主题</p><p>可以在初始化命令中指定自定义主题路径，即在初始化代码后添加<code>--config &quot;$env:POSH_THEMES_PATH\&lt;主题名&gt;.omp.json&quot;</code>。</p><p>以下为完整配置：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH\montys.omp.json&quot; | Invoke-Expression</span><br></pre></td></tr></table></figure><h3 id="3-4-图标美化"><a href="#3-4-图标美化" class="headerlink" title="3.4 图标美化"></a>3.4 图标美化</h3><p><strong>Terminal-Icons</strong> 是一个 PowerShell 模块，用于在 Windows 终端中为文件和文件夹添加图标。它基于文件名称或扩展名自动分配图标，若找不到相应的图标，则使用通用图标。</p><p>执行以下命令安装该模块：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Module -Name Terminal-Icons -Repository PSGallery</span><br></pre></td></tr></table></figure><p>安装后，在 PowerShell 配置文件 ($PROFILE) 中添加以下行以启用该插件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module Terminal-Icons</span><br></pre></td></tr></table></figure><p>效果展示：</p><p><img src="https://pic1.zhimg.com/v2-a954af12e27c1fd6aa9df1da01f5b278_1440w.jpg"></p><h3 id="3-5-安装插件模块"><a href="#3-5-安装插件模块" class="headerlink" title="3.5 安装插件模块"></a>3.5 安装插件模块</h3><p>完成3.1-3.4以上操作后，PowerShell 中已启用 <strong>oh-my-posh</strong> 的美化效果。接下来是一些进阶操作，旨在进一步提升 PowerShell 的使用体验，使其具备类似 <strong>Mac</strong> 上的 <strong>oh-my-zsh</strong> 功能，涵盖语法高亮、错误提示、多行编辑、快捷键绑定、自动补全、历史搜索及 Git 扩展显示等：</p><p><strong>3.5.1 安装 PSReadLine</strong></p><p><strong>PSReadLine</strong> 提供语法高亮、错误提示、多行编辑、键绑定、历史记录搜索等功能，提升命令行体验。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Module PSReadLine</span><br></pre></td></tr></table></figure><p><strong>3.5.2 安装 posh-git</strong></p><p><strong>posh-git</strong> 可以在 PowerShell 中显示 Git 状态信息，并提供 Git 命令的自动补全。</p><p>安装命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Module posh-git</span><br></pre></td></tr></table></figure><p>在 PowerShell 配置文件 (<code>$PROFILE</code>) 中添加以下行以启用该插件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module posh-git</span><br></pre></td></tr></table></figure><p><strong>3.5.3 安装 ZLocation</strong></p><p><strong>ZLocation</strong> 插件类似于 <code>autojump</code>或 <code>Zsh-z</code>，通过关键字直接跳转到指定目录，提升效率。</p><p>1. 安装 ZLocation 插件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Module ZLocation </span><br></pre></td></tr></table></figure><p>2. 修改配置文件：</p><p>打开 PowerShell 配置文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad $PROFILE</span><br></pre></td></tr></table></figure><p>在文件末尾添加：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module ZLocation</span><br></pre></td></tr></table></figure><p><strong>ZLocation 使用示例</strong></p><ul><li>查看已知的目录：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z</span><br></pre></td></tr></table></figure><ul><li>跳转到包含指定字串的目录（支持 Tab 补全）：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z doc</span><br></pre></td></tr></table></figure><ul><li>回到上一个访问的目录：</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">z -</span><br></pre></td></tr></table></figure><h3 id="3-6-编辑-PowerShell-配置文件"><a href="#3-6-编辑-PowerShell-配置文件" class="headerlink" title="3.6 编辑 PowerShell 配置文件"></a><strong>3.6 编辑 PowerShell 配置文件</strong></h3><p>配置文件的作用是在 PowerShell 启动时运行一些自定义的设置，比如导入模块、设置别名、定义函数等。</p><p>以下是我的配置文件，大家可以参考注释根据自己需求修改或者删除：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 初始化 oh-my-posh</span><br><span class="line">C:\\Users\\Strider（改为你自己的用户名）\\AppData\\Local\\Programs\\oh-my-posh\\bin\\oh-my-posh.exe init pwsh --config $env:POSH_THEMES_PATH\cloud-native-azuree.json | Invoke-Expression</span><br><span class="line"># 引入所需模块</span><br><span class="line">Import-Module posh-git # 引入 posh-git</span><br><span class="line">Import-Module PSReadLine # 历史命令联想</span><br><span class="line">Import-Module Terminal-Icons</span><br><span class="line">Import-Module ZLocation</span><br><span class="line"># 设置 PSReadLine 的生效场景</span><br><span class="line">Set-PSReadLineOption -PredictionSource History</span><br><span class="line">Set-PSReadLineOption -PredictionViewStyle ListView</span><br><span class="line"># 设置预测文本来源为历史记录 </span><br><span class="line">Set-PSReadLineOption -PredictionSource History </span><br><span class="line"># 设置 Tab 为菜单补全和 Intellisense </span><br><span class="line">Set-PSReadLineKeyHandler -Key &quot;Tab&quot; -Function MenuComplete </span><br><span class="line"># 每次回溯输入历史，光标定位于输入内容末尾 </span><br><span class="line">Set-PSReadLineOption -HistorySearchCursorMovesToEnd </span><br><span class="line"># 设置向上键为后向搜索历史记录 </span><br><span class="line">Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward </span><br><span class="line"># 设置向下键为前向搜索历史纪录 </span><br><span class="line">Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward</span><br></pre></td></tr></table></figure><h2 id="四、配置美化-CMD"><a href="#四、配置美化-CMD" class="headerlink" title="四、配置美化 CMD"></a>四、配置美化 CMD</h2><h3 id="4-1-什么是clink？"><a href="#4-1-什么是clink？" class="headerlink" title="4.1 什么是clink？"></a>4.1 什么是clink？</h3><p><strong>clink</strong> 是一款增强 CMD 功能的小工具，支持自动补全、命令历史等功能，极大提升了 CMD 的使用体验。</p><h3 id="4-2-安装-clink"><a href="#4-2-安装-clink" class="headerlink" title="4.2 安装 clink"></a>4.2 安装 clink</h3><p>在 CMD 中直接使用 scoop 安装 clink：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install clink</span><br></pre></td></tr></table></figure><h3 id="4-3-激活-clink"><a href="#4-3-激活-clink" class="headerlink" title="4.3 激活 clink"></a>4.3 激活 clink</h3><p>可以通过 <code>autorun</code> 命令设置 clink 自动运行，并使用 <code>quiet</code> 参数。这样每次启动 CMD 时，clink 会自动启用并禁用启动提示信息：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clink autorun install -- --quiet</span><br></pre></td></tr></table></figure><p>使用 <code>quiet</code> 参数前后的效果如下：</p><p>（使用前）</p><p><img src="https://pic1.zhimg.com/v2-2e90576b21c6a4795c27ad64c82ea00c_1440w.jpg"></p><p>（使用后）</p><p><img src="https://pic1.zhimg.com/v2-855d4c4ad47d288aa55081ebfcffb304_1440w.jpg"></p><h3 id="4-4-启用自动补全"><a href="#4-4-启用自动补全" class="headerlink" title="4.4 启用自动补全"></a>4.4 启用自动补全</h3><p>clink 支持 <code>autosuggest</code> 自动补全功能，类似于 shell 中的 zsh 自动建议。可以通过以下命令启用该功能：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clink set autosuggest.enable true</span><br></pre></td></tr></table></figure><h3 id="4-5-查看配置信息"><a href="#4-5-查看配置信息" class="headerlink" title="4.5 查看配置信息"></a>4.5 查看配置信息</h3><p>可以使用以下命令查看当前的 clink 配置信息：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clink info</span><br></pre></td></tr></table></figure><h3 id="4-6-配置-oh-my-posh-样式"><a href="#4-6-配置-oh-my-posh-样式" class="headerlink" title="4.6 配置 oh-my-posh 样式"></a>4.6 配置 oh-my-posh 样式</h3><p>如果希望在 CMD 中同样展示 <strong>oh-my-posh</strong> 的样式，可以通过 Lua 脚本加载主题。具体步骤如下：</p><p><strong>创建 Lua 配置文件</strong></p><p>在 <code>C:\Users\&lt;用户名&gt;\AppData\Local\clink</code> 目录下，新建一个名为 <code>oh-my-posh.lua</code> 的文件。</p><p><strong>加载 oh-my-posh 主题</strong></p><p>在文件中写入以下代码，以将 oh-my-posh 的样式应用到 CMD：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load(io.popen(&#x27;oh-my-posh init cmd&#x27;):read(&quot;*a&quot;))() </span><br></pre></td></tr></table></figure><p>配置完成后，重新打开 CMD，即可看到应用了 <strong>oh-my-posh</strong> 的自定义提示符样式。</p><h3 id="4-7-使用-CMD-脚本预先配置-Alias"><a href="#4-7-使用-CMD-脚本预先配置-Alias" class="headerlink" title="4.7 使用 CMD 脚本预先配置 Alias"></a>4.7 使用 CMD 脚本预先配置 Alias</h3><p>通过 Clink，可以在 CMD 中为常用的 Linux 命令（如 <code>ls</code>、<code>rm</code> 等）创建别名（alias），帮助习惯 Linux 命令行的用户更轻松地适应 CMD 控制台。</p><p>在 Windows 系统上设置 alias 通常使用 <code>doskey</code> 命令，并可以借助 Clink 工具，在 CMD 启动时自动执行脚本来加载这些 alias。默认情况下，Clink 会从 <code>C:\Users\&lt;username&gt;\AppData\Local\clink</code> 目录中查找 <code>clink_start.cmd</code> 文件来进行初始化。</p><p>可以在该目录下创建 <code>clink_start.cmd</code> 文件，并添加以下内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@echo off </span><br><span class="line">doskey ls=dir </span><br><span class="line">doskey rm=del </span><br><span class="line">doskey cp=copy </span><br><span class="line">doskey mv=move </span><br><span class="line">doskey of=explorer.exe .</span><br></pre></td></tr></table></figure><p>保存文件后，这些 <code>doskey</code> 指令将在 CMD 下次启动时自动执行，从而实现 alias 效果。</p><h2 id="五、美化-VScode-内终端"><a href="#五、美化-VScode-内终端" class="headerlink" title="五、美化 VScode 内终端"></a>五、美化 VScode 内终端</h2><p>在 VScode 里使用终端，可能会出现乱码或者图标不显示情况，设置一下字体就行，直接输入你上面配置的 oh-my-posh 字体 如： MesloLGM Nerd Font。</p><p><img src="https://pic1.zhimg.com/v2-5e14ed81bab8a24ca48cf3358f25c6e8_1440w.jpg"></p><p>效果展示如下：</p><p><img src="https://pic4.zhimg.com/v2-57711ca22bd1f4e20ab769c12a47fe39_1440w.jpg"></p><h2 id="六、结语"><a href="#六、结语" class="headerlink" title="六、结语"></a>六、结语</h2><p><strong>oh-my-posh</strong> 总体体验上还不错，能够方便的展示 git 相关的信息，但是性能拉胯，每次终端可能需要0.5s到2s之间的延迟卡顿，相比于 Linux 和 Mac 上的 Shell 要慢上不少，<strong>最后提一句：国补之后的铭凡原子侠G7 PT迷你主机是真的香啊，兄弟们赶紧点击我文章中的链接冲起来吧！</strong></p><p><strong>END</strong></p><blockquote><p>攻城狮阿程一个喜欢IT也懂土木工程的运维攻城狮。<br>运维入行，直至信创、网安、OpenWrt、虚拟技术、Docker 容器。<br>岗位历经网络工程、运维、项目经理、信息安全。<br>主要渠道：个人淘宝店：阿程数码<br>知乎：攻城狮阿程<br>个人公众号：攻城狮阿程<br>个人博客：<a href="https://strider1230.cn/">https://strider1230.cn</a><br>小红书：果冻橙是橘子吗の快乐生活<br>知识星球：阿程的资源社区（待完善）<br>抖音炉石传说：果冻橙是橘子吗<br>其他渠道持续拓展中</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/hello-world/"/>
      <url>/2025/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>My First Rust Article</title>
      <link href="/2023/my-first-rust-article/"/>
      <url>/2023/my-first-rust-article/</url>
      
        <content type="html"><![CDATA[<h1 id="学习RUST"><a href="#学习RUST" class="headerlink" title="学习RUST"></a>学习RUST</h1><h2 id="RUST-GO"><a href="#RUST-GO" class="headerlink" title="RUST  GO"></a>RUST  GO</h2>]]></content>
      
      
      <categories>
          
          <category> Computer-Science </category>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Programming </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
